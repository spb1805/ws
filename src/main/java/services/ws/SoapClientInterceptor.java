// /////////////////////////////////////////////////////////////////////////////
// @ Copyright Surecomp Israel, 2019.
// This document contains proprietary and confidential information, and shall
// not be reproduced, transferred, or disclosed to others, without the prior
// written consent of Surecomp.

package services.ws;

import java.util.Iterator;
import java.util.List;

import javax.xml.soap.SOAPBody;
import javax.xml.soap.SOAPElement;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPHeader;
import javax.xml.soap.SOAPMessage;
import javax.xml.soap.SOAPPart;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.collections.CollectionUtils;
import org.springframework.ws.client.WebServiceClientException;
import org.springframework.ws.client.support.interceptor.ClientInterceptorAdapter;
import org.springframework.ws.context.MessageContext;
import org.springframework.ws.soap.saaj.SaajSoapMessage;

import services.ws.to.InterceptorsDataTo;
import services.ws.to.NamespaceDeclarationTo;

/**
 * The class <code>SoapClientInterceptor</code> provides possibility to
 * "fine-tune" of prefixes (like "SOAP-ENV" - to "soapenv") and namespaces of
 * SOAP request message, generated by Spring WebServiceTemplate.
 */
public class SoapClientInterceptor extends ClientInterceptorAdapter {
	private final Log logger = LogFactory.getLog(getClass());

	private static final String SOAP_ENV_NAMESPACE = "http://schemas.xmlsoap.org/soap/envelope/";
	private static final String PREFERRED_PREFIX = "soapenv";

	private InterceptorsDataTo interceptorsDataTo;

	public void init(InterceptorsDataTo interceptorsDataTo) {
		this.interceptorsDataTo = interceptorsDataTo;
	}

	@Override
	public boolean handleRequest(MessageContext messageContext) throws WebServiceClientException {
		SaajSoapMessage soapRequest = (SaajSoapMessage) messageContext.getRequest();
		alterSoapEnvelope(soapRequest);
		return true;
	}

	private void alterSoapEnvelope(SaajSoapMessage soapRequest) {
		try {
			SOAPMessage soapMessage = soapRequest.getSaajMessage();
			SOAPPart soapPart = soapMessage.getSOAPPart();
			SOAPEnvelope envelope = soapPart.getEnvelope();
			SOAPHeader header = soapMessage.getSOAPHeader();
			SOAPBody body = soapMessage.getSOAPBody();

			setEnvelope(envelope);
			setHeader(header);
			setBody(body);
		} catch (SOAPException e) {
			logger.error(e.getMessage(), e);
		}
	}

	/**
	 * 
	 * @param envelope
	 * @throws SOAPException
	 */
	private void setEnvelope(SOAPEnvelope envelope) throws SOAPException {
		if (interceptorsDataTo.isUseSoapEnvPrefix()) {
			envelope.setPrefix(PREFERRED_PREFIX);
			//envelope.removeNamespaceDeclaration(envelope.getPrefix());
			removeNamespaces(envelope);
			envelope.addNamespaceDeclaration(PREFERRED_PREFIX, SOAP_ENV_NAMESPACE);
		}

		List<NamespaceDeclarationTo> namespaceDeclarationTo = interceptorsDataTo.getNamespaceDeclarationToList();
		if (CollectionUtils.isNotEmpty(namespaceDeclarationTo)) {
			namespaceDeclarationTo.forEach(namespace -> {
				try {
					envelope.addNamespaceDeclaration(namespace.getPrefix(), namespace.getUri());
				} catch (SOAPException e) {
					logger.error(e.getMessage(), e);
				}
			});
		}
	}

	/**
	 * 
	 * @param header
	 * @throws SOAPException
	 */
	private void setHeader(SOAPHeader header) throws SOAPException {
		//header.removeNamespaceDeclaration(header.getPrefix());
		removeNamespaces(header);
		if (interceptorsDataTo.isUseSoapEnvPrefix()) {
			header.setPrefix(PREFERRED_PREFIX);
		}

		@SuppressWarnings("unchecked")
		Iterator<SOAPElement> headerElements = (Iterator<SOAPElement>) header.getChildElements();
		if (headerElements.hasNext()) {
			setElementPrefix(headerElements, interceptorsDataTo.getHeaderElementsPrefix());
		}
	}

	/**
	 * Recursively sets the prefix for all elements and their child elements.
	 * 
	 * @param elements
	 * @param prefix
	 */
	private void setElementPrefix(Iterator<?> elements, String prefix) {
		while (elements.hasNext()) {
			Object theElement = elements.next();
			if (theElement instanceof SOAPElement) {
				SOAPElement soapElement = (SOAPElement) theElement;
				soapElement.removeNamespaceDeclaration(soapElement.getPrefix());
				removeNamespaces(soapElement);
				soapElement.setPrefix(prefix);

				Iterator<?> chiledElements = soapElement.getChildElements();
				if (chiledElements != null && chiledElements.hasNext()) {
					setElementPrefix(chiledElements, prefix);
				}
			}

		}
	}
	
	private void removeNamespaces(SOAPElement soapElement) {
		@SuppressWarnings("unchecked")
		Iterator<String> namespaces = soapElement.getNamespacePrefixes();
		try {
			while (namespaces != null && namespaces.hasNext()) {
				soapElement.removeNamespaceDeclaration(namespaces.next());
			}					
		} catch (NullPointerException e) {
		}
	}

	/**
	 * 
	 * @param body
	 * @throws SOAPException
	 */
	private void setBody(SOAPBody body) throws SOAPException {
		body.removeNamespaceDeclaration(body.getPrefix());
		if (interceptorsDataTo.isUseSoapEnvPrefix()) {
			body.setPrefix(PREFERRED_PREFIX);
		}

		@SuppressWarnings("unchecked")
		Iterator<SOAPElement> bodyElements = (Iterator<SOAPElement>) body.getChildElements();
		if (bodyElements.hasNext()) {
			setElementPrefix(bodyElements, interceptorsDataTo.getBodyElementsPrefix());
		}
	}
}
